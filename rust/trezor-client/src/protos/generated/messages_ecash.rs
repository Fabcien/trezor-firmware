// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-ecash.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.ecash.EcashSignStake)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EcashSignStake {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.txid)
    pub txid: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.index)
    pub index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.amount)
    pub amount: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.height)
    pub height: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.is_coinbase)
    pub is_coinbase: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.expiration_time)
    pub expiration_time: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashSignStake.master_pubkey)
    pub master_pubkey: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ecash.EcashSignStake.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EcashSignStake {
    fn default() -> &'a EcashSignStake {
        <EcashSignStake as ::protobuf::Message>::default_instance()
    }
}

impl EcashSignStake {
    pub fn new() -> EcashSignStake {
        ::std::default::Default::default()
    }

    // required bytes txid = 2;

    pub fn txid(&self) -> &[u8] {
        match self.txid.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_txid(&mut self) {
        self.txid = ::std::option::Option::None;
    }

    pub fn has_txid(&self) -> bool {
        self.txid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: ::std::vec::Vec<u8>) {
        self.txid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.txid.is_none() {
            self.txid = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.txid.as_mut().unwrap()
    }

    // Take field
    pub fn take_txid(&mut self) -> ::std::vec::Vec<u8> {
        self.txid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 index = 3;

    pub fn index(&self) -> u32 {
        self.index.unwrap_or(0)
    }

    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = ::std::option::Option::Some(v);
    }

    // required uint64 amount = 4;

    pub fn amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // required uint32 height = 5;

    pub fn height(&self) -> u32 {
        self.height.unwrap_or(0)
    }

    pub fn clear_height(&mut self) {
        self.height = ::std::option::Option::None;
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = ::std::option::Option::Some(v);
    }

    // required bool is_coinbase = 6;

    pub fn is_coinbase(&self) -> bool {
        self.is_coinbase.unwrap_or(false)
    }

    pub fn clear_is_coinbase(&mut self) {
        self.is_coinbase = ::std::option::Option::None;
    }

    pub fn has_is_coinbase(&self) -> bool {
        self.is_coinbase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_coinbase(&mut self, v: bool) {
        self.is_coinbase = ::std::option::Option::Some(v);
    }

    // required uint64 expiration_time = 8;

    pub fn expiration_time(&self) -> u64 {
        self.expiration_time.unwrap_or(0)
    }

    pub fn clear_expiration_time(&mut self) {
        self.expiration_time = ::std::option::Option::None;
    }

    pub fn has_expiration_time(&self) -> bool {
        self.expiration_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration_time(&mut self, v: u64) {
        self.expiration_time = ::std::option::Option::Some(v);
    }

    // required bytes master_pubkey = 9;

    pub fn master_pubkey(&self) -> &[u8] {
        match self.master_pubkey.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_master_pubkey(&mut self) {
        self.master_pubkey = ::std::option::Option::None;
    }

    pub fn has_master_pubkey(&self) -> bool {
        self.master_pubkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master_pubkey(&mut self, v: ::std::vec::Vec<u8>) {
        self.master_pubkey = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_master_pubkey(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.master_pubkey.is_none() {
            self.master_pubkey = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.master_pubkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_master_pubkey(&mut self) -> ::std::vec::Vec<u8> {
        self.master_pubkey.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &EcashSignStake| { &m.address_n },
            |m: &mut EcashSignStake| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txid",
            |m: &EcashSignStake| { &m.txid },
            |m: &mut EcashSignStake| { &mut m.txid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "index",
            |m: &EcashSignStake| { &m.index },
            |m: &mut EcashSignStake| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &EcashSignStake| { &m.amount },
            |m: &mut EcashSignStake| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "height",
            |m: &EcashSignStake| { &m.height },
            |m: &mut EcashSignStake| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_coinbase",
            |m: &EcashSignStake| { &m.is_coinbase },
            |m: &mut EcashSignStake| { &mut m.is_coinbase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiration_time",
            |m: &EcashSignStake| { &m.expiration_time },
            |m: &mut EcashSignStake| { &mut m.expiration_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "master_pubkey",
            |m: &EcashSignStake| { &m.master_pubkey },
            |m: &mut EcashSignStake| { &mut m.master_pubkey },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EcashSignStake>(
            "EcashSignStake",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EcashSignStake {
    const NAME: &'static str = "EcashSignStake";

    fn is_initialized(&self) -> bool {
        if self.txid.is_none() {
            return false;
        }
        if self.index.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        if self.height.is_none() {
            return false;
        }
        if self.is_coinbase.is_none() {
            return false;
        }
        if self.expiration_time.is_none() {
            return false;
        }
        if self.master_pubkey.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.txid = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.index = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.height = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.is_coinbase = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.expiration_time = ::std::option::Option::Some(is.read_uint64()?);
                },
                74 => {
                    self.master_pubkey = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.txid.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.height {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.is_coinbase {
            my_size += 1 + 1;
        }
        if let Some(v) = self.expiration_time {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.master_pubkey.as_ref() {
            my_size += ::protobuf::rt::bytes_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.txid.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.index {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.height {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.is_coinbase {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.expiration_time {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.master_pubkey.as_ref() {
            os.write_bytes(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EcashSignStake {
        EcashSignStake::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.txid = ::std::option::Option::None;
        self.index = ::std::option::Option::None;
        self.amount = ::std::option::Option::None;
        self.height = ::std::option::Option::None;
        self.is_coinbase = ::std::option::Option::None;
        self.expiration_time = ::std::option::Option::None;
        self.master_pubkey = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EcashSignStake {
        static instance: EcashSignStake = EcashSignStake {
            address_n: ::std::vec::Vec::new(),
            txid: ::std::option::Option::None,
            index: ::std::option::Option::None,
            amount: ::std::option::Option::None,
            height: ::std::option::Option::None,
            is_coinbase: ::std::option::Option::None,
            expiration_time: ::std::option::Option::None,
            master_pubkey: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EcashSignStake {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EcashSignStake").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EcashSignStake {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EcashSignStake {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.ecash.EcashStakeSignature)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EcashStakeSignature {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashStakeSignature.pubkey)
    pub pubkey: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ecash.EcashStakeSignature.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ecash.EcashStakeSignature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EcashStakeSignature {
    fn default() -> &'a EcashStakeSignature {
        <EcashStakeSignature as ::protobuf::Message>::default_instance()
    }
}

impl EcashStakeSignature {
    pub fn new() -> EcashStakeSignature {
        ::std::default::Default::default()
    }

    // required bytes pubkey = 1;

    pub fn pubkey(&self) -> &[u8] {
        match self.pubkey.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_pubkey(&mut self) {
        self.pubkey = ::std::option::Option::None;
    }

    pub fn has_pubkey(&self) -> bool {
        self.pubkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::vec::Vec<u8>) {
        self.pubkey = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pubkey.is_none() {
            self.pubkey = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.pubkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::vec::Vec<u8> {
        self.pubkey.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pubkey",
            |m: &EcashStakeSignature| { &m.pubkey },
            |m: &mut EcashStakeSignature| { &mut m.pubkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &EcashStakeSignature| { &m.signature },
            |m: &mut EcashStakeSignature| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EcashStakeSignature>(
            "EcashStakeSignature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EcashStakeSignature {
    const NAME: &'static str = "EcashStakeSignature";

    fn is_initialized(&self) -> bool {
        if self.pubkey.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pubkey = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pubkey.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pubkey.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EcashStakeSignature {
        EcashStakeSignature::new()
    }

    fn clear(&mut self) {
        self.pubkey = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EcashStakeSignature {
        static instance: EcashStakeSignature = EcashStakeSignature {
            pubkey: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EcashStakeSignature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EcashStakeSignature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EcashStakeSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EcashStakeSignature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14messages-ecash.proto\x12\x18hw.trezor.messages.ecash\"\xf6\x01\n\
    \x0eEcashSignStake\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\
    \x12\x12\n\x04txid\x18\x02\x20\x02(\x0cR\x04txid\x12\x14\n\x05index\x18\
    \x03\x20\x02(\rR\x05index\x12\x16\n\x06amount\x18\x04\x20\x02(\x04R\x06a\
    mount\x12\x16\n\x06height\x18\x05\x20\x02(\rR\x06height\x12\x1f\n\x0bis_\
    coinbase\x18\x06\x20\x02(\x08R\nisCoinbase\x12'\n\x0fexpiration_time\x18\
    \x08\x20\x02(\x04R\x0eexpirationTime\x12#\n\rmaster_pubkey\x18\t\x20\x02\
    (\x0cR\x0cmasterPubkey\"K\n\x13EcashStakeSignature\x12\x16\n\x06pubkey\
    \x18\x01\x20\x02(\x0cR\x06pubkey\x12\x1c\n\tsignature\x18\x02\x20\x02(\
    \x0cR\tsignatureB9\n#com.satoshilabs.trezor.lib.protobufB\x12TrezorMessa\
    geEcash\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(EcashSignStake::generated_message_descriptor_data());
            messages.push(EcashStakeSignature::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
