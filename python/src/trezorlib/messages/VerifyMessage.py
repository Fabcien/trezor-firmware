# Automatically generated by pb2py
# fmt: off
from .. import protobuf as p

if __debug__:
    try:
        from typing import Dict, List  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypeSigningAlgo = Literal[0, 1]
    except ImportError:
        pass


class VerifyMessage(p.MessageType):
    MESSAGE_WIRE_TYPE = 39

    def __init__(
        self,
        *,
        address: str,
        signature: bytes,
        message: bytes,
        coin_name: str = "Bitcoin",
        signing_algo: EnumTypeSigningAlgo = 0,
        pubkey: bytes = None,
        is_digest: bool = False,
    ) -> None:
        self.address = address
        self.signature = signature
        self.message = message
        self.coin_name = coin_name
        self.signing_algo = signing_algo
        self.pubkey = pubkey
        self.is_digest = is_digest

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('address', p.UnicodeType, p.FLAG_REQUIRED),
            2: ('signature', p.BytesType, p.FLAG_REQUIRED),
            3: ('message', p.BytesType, p.FLAG_REQUIRED),
            4: ('coin_name', p.UnicodeType, "Bitcoin"),  # default=Bitcoin
            5: ('signing_algo', p.EnumType("SigningAlgo", (0, 1)), 0),  # default=ECDSA
            6: ('pubkey', p.BytesType, None),
            7: ('is_digest', p.BoolType, False),  # default=false
        }
